-- ========================================
-- OPTIMIZED COMPLETE SCHEMA
-- ========================================

-- 1. PROFILES TABLE (Single source of truth for user data)
-- This replaces both 'profiles' and 'user_stats' tables
CREATE TABLE IF NOT EXISTS public.profiles (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  wallet_address text NOT NULL,
  username text NULL,
  email text NULL,
  balance numeric(20, 9) NULL DEFAULT 0,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  avatar_url text NULL,
  bio text NULL,
  level integer NULL DEFAULT 1,
  
  -- Game Statistics (consolidated from user_stats)
  total_bets integer NULL DEFAULT 0,
  total_won numeric(20, 9) NULL DEFAULT 0,
  total_wagered numeric(20, 9) NULL DEFAULT 0,
  total_winnings numeric(20, 9) NULL DEFAULT 0,
  biggest_win numeric(20, 9) NULL DEFAULT 0,
  luckiest_win_multiplier numeric(10, 2) NULL DEFAULT 0,
  games_played integer NULL DEFAULT 0,
  net_profit numeric(20, 9) NULL DEFAULT 0,
  last_played_at timestamp with time zone NULL,
  
  -- Referral System
  referral_code text NULL,
  referred_by text NULL,
  
  -- Constraints
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_referral_code_key UNIQUE (referral_code),
  CONSTRAINT profiles_wallet_address_key UNIQUE (wallet_address)
) TABLESPACE pg_default;

-- 2. GAME RESULTS TABLE (with RNG seeds and verification data)
CREATE TABLE IF NOT EXISTS public.game_results (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address text NOT NULL,
  game_type text NOT NULL,
  wager_amount numeric(20, 9) NOT NULL,
  payout_amount numeric(20, 9) NOT NULL,
  multiplier numeric(10, 2) NOT NULL,
  result text NOT NULL,
  
  -- Provably Fair Data
  rng_seed text NOT NULL DEFAULT '',
  client_seed text NOT NULL DEFAULT '',
  nonce integer NOT NULL DEFAULT 0,
  game_id text NOT NULL DEFAULT '',
  transaction_signature text NOT NULL DEFAULT '',
  
  -- Timestamps
  created_at timestamp with time zone NULL DEFAULT now(),
  
  -- Constraints
  CONSTRAINT game_results_pkey PRIMARY KEY (id),
  CONSTRAINT game_results_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES profiles (wallet_address) ON DELETE CASCADE,
  CONSTRAINT game_results_result_check CHECK ((result = ANY (ARRAY['win'::text, 'lose'::text])))
) TABLESPACE pg_default;

-- 3. CHAT MESSAGES TABLE (unchanged)
CREATE TABLE IF NOT EXISTS public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  wallet_address text NOT NULL,
  username text NOT NULL,
  message text NOT NULL,
  channel text NOT NULL DEFAULT 'global'::text,
  reply_to uuid NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  updated_at timestamp with time zone NULL DEFAULT now(),
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id),
  CONSTRAINT chat_messages_reply_to_fkey FOREIGN KEY (reply_to) REFERENCES chat_messages (id) ON DELETE SET NULL,
  CONSTRAINT chat_messages_wallet_address_fkey FOREIGN KEY (wallet_address) REFERENCES profiles (wallet_address) ON DELETE CASCADE
) TABLESPACE pg_default;

-- ========================================
-- INDEXES FOR PERFORMANCE
-- ========================================

-- Profiles indexes
CREATE INDEX IF NOT EXISTS idx_profiles_wallet_address ON public.profiles USING btree (wallet_address) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_profiles_username ON public.profiles USING btree (username) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_profiles_created_at ON public.profiles USING btree (created_at) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_profiles_net_profit ON public.profiles USING btree (net_profit DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_profiles_games_played ON public.profiles USING btree (games_played DESC) TABLESPACE pg_default;

-- Game results indexes
CREATE INDEX IF NOT EXISTS idx_game_results_wallet_address ON public.game_results USING btree (wallet_address) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_created_at ON public.game_results USING btree (created_at DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_game_type ON public.game_results USING btree (game_type) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_result ON public.game_results USING btree (result) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_multiplier ON public.game_results USING btree (multiplier) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_rng_seed ON public.game_results USING btree (rng_seed) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_client_seed ON public.game_results USING btree (client_seed) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_game_id ON public.game_results USING btree (game_id) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_game_results_transaction_signature ON public.game_results USING btree (transaction_signature) TABLESPACE pg_default;

-- Chat messages indexes
CREATE INDEX IF NOT EXISTS idx_chat_messages_wallet_address ON public.chat_messages USING btree (wallet_address) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_chat_messages_channel_created ON public.chat_messages USING btree (channel, created_at DESC) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_chat_messages_created_at ON public.chat_messages USING btree (created_at) TABLESPACE pg_default;
CREATE INDEX IF NOT EXISTS idx_chat_messages_channel ON public.chat_messages USING btree (channel) TABLESPACE pg_default;

-- ========================================
-- FUNCTIONS AND TRIGGERS
-- ========================================

-- Function to handle updated_at timestamps
CREATE OR REPLACE FUNCTION handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update user stats when a game result is inserted
CREATE OR REPLACE FUNCTION update_user_stats_from_game()
RETURNS TRIGGER AS $$
BEGIN
  -- Update the profiles table with aggregated stats
  UPDATE profiles 
  SET 
    total_bets = COALESCE(total_bets, 0) + 1,
    total_won = COALESCE(total_won, 0) + NEW.payout_amount,
    total_wagered = COALESCE(total_wagered, 0) + NEW.wager_amount,
    total_winnings = COALESCE(total_winnings, 0) + NEW.payout_amount,
    games_played = COALESCE(games_played, 0) + 1,
    net_profit = COALESCE(net_profit, 0) + (NEW.payout_amount - NEW.wager_amount),
    biggest_win = GREATEST(COALESCE(biggest_win, 0), NEW.payout_amount),
    luckiest_win_multiplier = GREATEST(COALESCE(luckiest_win_multiplier, 0), NEW.multiplier),
    last_played_at = NOW(),
    updated_at = NOW()
  WHERE wallet_address = NEW.wallet_address;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers
DROP TRIGGER IF EXISTS profiles_updated_at ON public.profiles;
CREATE TRIGGER profiles_updated_at 
  BEFORE UPDATE ON public.profiles 
  FOR EACH ROW 
  EXECUTE FUNCTION handle_updated_at();

DROP TRIGGER IF EXISTS chat_messages_updated_at ON public.chat_messages;
CREATE TRIGGER chat_messages_updated_at 
  BEFORE UPDATE ON public.chat_messages 
  FOR EACH ROW 
  EXECUTE FUNCTION handle_updated_at();

DROP TRIGGER IF EXISTS update_user_stats_trigger ON public.game_results;
CREATE TRIGGER update_user_stats_trigger
  AFTER INSERT ON public.game_results
  FOR EACH ROW
  EXECUTE FUNCTION update_user_stats_from_game();

-- ========================================
-- ROW LEVEL SECURITY
-- ========================================

-- Enable RLS on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.game_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chat_messages ENABLE ROW LEVEL SECURITY;

-- Profiles policies
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
DROP POLICY IF EXISTS "Service role can do everything on profiles" ON public.profiles;

CREATE POLICY "Users can view their own profile" ON public.profiles
  FOR SELECT USING (auth.jwt() ->> 'sub' = wallet_address);

CREATE POLICY "Users can update their own profile" ON public.profiles
  FOR UPDATE USING (auth.jwt() ->> 'sub' = wallet_address);

CREATE POLICY "Service role can do everything on profiles" ON public.profiles
  FOR ALL USING (auth.role() = 'service_role');

-- Game results policies
DROP POLICY IF EXISTS "Users can view their own game results" ON public.game_results;
DROP POLICY IF EXISTS "Users can insert their own game results" ON public.game_results;
DROP POLICY IF EXISTS "Service role can do everything on game_results" ON public.game_results;

CREATE POLICY "Users can view their own game results" ON public.game_results
  FOR SELECT USING (auth.jwt() ->> 'sub' = wallet_address);

CREATE POLICY "Users can insert their own game results" ON public.game_results
  FOR INSERT WITH CHECK (auth.jwt() ->> 'sub' = wallet_address);

CREATE POLICY "Service role can do everything on game_results" ON public.game_results
  FOR ALL USING (auth.role() = 'service_role');

-- Chat messages policies
DROP POLICY IF EXISTS "Users can view chat messages" ON public.chat_messages;
DROP POLICY IF EXISTS "Users can insert chat messages" ON public.chat_messages;
DROP POLICY IF EXISTS "Service role can do everything on chat_messages" ON public.chat_messages;

CREATE POLICY "Users can view chat messages" ON public.chat_messages
  FOR SELECT USING (true); -- Allow everyone to view chat

CREATE POLICY "Users can insert chat messages" ON public.chat_messages
  FOR INSERT WITH CHECK (auth.jwt() ->> 'sub' = wallet_address);

CREATE POLICY "Service role can do everything on chat_messages" ON public.chat_messages
  FOR ALL USING (auth.role() = 'service_role');
